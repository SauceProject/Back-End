

@using ITI.Sauce.ViewModels


@model IPagedList<RatingViewModel>
 <!DOCTYPE html>
<html>
<head>
<style>
table {
  font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}


        #btnAdd {
    width: 7%;
    background-color: #143444;
    color: #F6EE99;
    padding: 14px 20px;
    margin: 8px 0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    text-decoration:none;
    float:right;
}
</style>
</head>
<body>
<h2>Rating Table</h2>
    <a asp-action="Add" asp-controller="Rating" id="btnAdd">Add</a>
<table>
  <tr>
    <th>RatingID</th>
    <th>RatingValue</th>
  </tr>
    @foreach(var V in Model)
{  
  <tr>
    <td>@V.RatingID</td>
    <td>@V.RatingValue</td>

  </tr>
    }
</table>
<div>
    @Html.PagedListPager((IPagedList)Model, page => Url.Action("Search", new { pageIndex = page }),
        new X.PagedList.Web.Common.PagedListRenderOptions
        {
        DisplayItemSliceAndTotal = true,
        ContainerDivClasses = new[] { "navigation" },
        LiElementClasses = new[] { "page-item" },
        PageClasses = new[] { "page-link" },
        })
    </div>
    <div>
    <script>
        $(document).ready(function() {
            $('ul.pagination > li.disabled > a').addClass('page-link');
        });
    </script>
</div>
</body>
</html>

